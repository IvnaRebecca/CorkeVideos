WEBVTT
Kind: captions
Language: pt-BR

00:00:03.649 --> 00:00:08.750
Vamos observar a determinação da cinemática
inversa do nosso simples robô de dois elos usando

00:00:08.750 --> 00:00:10.940
uma abordagem numérica.

00:00:10.940 --> 00:00:18.770
Vamos abrir agora, na área de trabalho
um modelo de nosso robô de dois elos. Ou seja,

00:00:18.770 --> 00:00:25.880
a variável P2 da área de trabalho é esse novo 
robô e podemos traçar sua configuração 

00:00:25.880 --> 00:00:30.820
para ângulos de junta zerados, essa função
também define uma varíavel da área de trabalho QZ, a qual

00:00:30.820 --> 00:00:38.020
contém o valor de zero zero e é assim que o 
robô se mostra na configuração de ângulo zero.

00:00:39.180 --> 00:00:44.390
Agora irei definir uma posição desejada do
efetuador para esse robô e irei simplesmente 

00:00:44.390 --> 00:00:49.460
definir a translação, que será uma
na direção X, uma na direção Y

00:00:49.460 --> 00:00:52.180
e zero na direção Z.

00:00:52.180 --> 00:00:58.210
Lembre-se que esse robô possui somente duas
juntas e ele só pode se mover no plano XY 

00:00:58.210 --> 00:01:02.790
então para mim não faz sentido atribuir
um valor para a coordenada Z que não seja zero. 

00:01:02.790 --> 00:01:10.650
O robô é incapaz de chegar a qualquer
posição em que Z não é igual a zero.

00:01:10.650 --> 00:01:17.120
E aqui está a transformação homogênea,
representando a posição desejada.

00:01:17.120 --> 00:01:24.150
Agora a fim de determinar a cinemática inversa
numericamente, eu escrevo nosso objeto e eu

00:01:24.150 --> 00:01:30.080
usarei o método ikine, que significa Inverse Kinematics
(cinemática inversa). E esse método particular

00:01:30.080 --> 00:01:36.180
executa uma solução numérica para determinar 
a cinemática inversa. O primeiro argumento que 

00:01:36.180 --> 00:01:43.390
eu passo é a pose desejada T do efetuador que nós
acabamos de definir e eu irei adicionar os ângulos

00:01:43.390 --> 00:01:50.250
de junta iniciais que irei usar na procura pelos 
melhores ângulos de junta para atingir essa pose.

00:01:50.720 --> 00:01:56.640
O último argumento é um pouco mais complexo.
É o que eu chamo de "Mask Matrix" (Matriz Máscara) e é

00:01:56.640 --> 00:02:01.850
uma matriz de seis elementos e os dois primeiros elementos
são 1's e os quatro últimos elementos são 0's.

00:02:01.850 --> 00:02:08.360
E o que isso está dizendo para a função ikine é que 
ela tente encontrar as posições X e Y do efetuador.

00:02:08.360 --> 00:02:13.779
Não se importe em tentar encontrar a coordenada Z
, não se importe em tentar encontrar

00:02:13.779 --> 00:02:19.569
a orientação. Uma vez que esse robô possui somente
dois graus de liberdade, só poderá efetuar

00:02:19.569 --> 00:02:25.279
duas condições na pose do efetuador e
eu decidi que essas condições serão suas 

00:02:25.279 --> 00:02:31.650
posições X e Y. Eu não me importo com
quaisquer outros elementos da pose do 

00:02:31.650 --> 00:02:39.250
efetuador. Eu pressiono enter e a solução 
retorna Pi e menos Pi. Bom, vamos traçar isso.

00:02:41.200 --> 00:02:49.639
Traçamos Q, e daí vemos a configuração desejada do 
robô a fim de atingir a particular posição do efetuador 

00:02:49.639 --> 00:02:51.439
que eu pedi.

00:02:51.439 --> 00:02:55.120
Vamos dar uma olhada de cima nesse robô
e podemos ver claramente, o efetuador

00:02:55.120 --> 00:03:01.829
moveu-se para a posição um na direção X
e um na direção Y

00:03:01.829 --> 00:03:07.620
Agora, vamos ver se conseguimos encontrar outra
configuração do robô cujo efetuador tenha a mesma

00:03:07.620 --> 00:03:12.349
pose. O que faremos é voltar para nossa
cinemática inversa

00:03:12.349 --> 00:03:18.659
e usar uma condição inicial diferente.
Eu vou iniciar a pesquisa com um Q1 igual

00:03:18.659 --> 00:03:26.370
a menos um radianos ao invés de zero radianos,
executo o solucionador e outra vez obtemos

00:03:26.370 --> 00:03:30.319
exatamente a mesma solução de antes.

00:03:30.319 --> 00:03:37.419
Vamos tentar outra condição diferente,
vamos tentar colocar esta em menos um e

00:03:37.419 --> 00:03:45.459
hey, agora nós temos uma solução diferente e
vamos plotar como seria dessa solução,

00:03:45.459 --> 00:03:52.329
nós podemos ver que, novamente, ele atingiu
a posição dejesada para o efetuador, um na

00:03:52.329 --> 00:03:56.239
direção X e um na direção Y, mas a
configuração do robô agora está diferente.

00:03:56.239 --> 00:04:02.139
Veja que determinar os ângulos de junta
iniciais que resultaram nessa segunda configuração

00:04:02.139 --> 00:04:07.480
não foi algo trivial, foi preciso um pouco
de tentativa e erro, a fim de guiar o

00:04:07.480 --> 00:04:13.139
algoritmo, para encontrar essa solução alternativa.

00:04:13.139 --> 00:04:18.329
Agora, vamos tentar aplicar cinemática numérica
inversa para ese robô de seis graus de

00:04:18.329 --> 00:04:21.259
liberdade, o qual se move em três dimensões.

00:04:21.259 --> 00:04:27.490
A primeira coisa que faremos é carregar
o modelo do robô Puma. Agora, temos a variável

00:04:27.490 --> 00:04:33.729
na nossa área de trabalho, e eu vou plotar o
robô na sus configuração de ângulo zero, usando

00:04:33.729 --> 00:04:40.810
a variável QZ que foi definida pelo
script MDL Puma 560. E aqui nós vemos

00:04:40.810 --> 00:04:45.199
o robô em sua pose de ângulo zero. A próxima
coisa que farei será definir a pose que eu

00:04:45.199 --> 00:04:51.349
quero que o efetuador assuma. E ela terá uma
componente translacionam de 0.6 na

00:04:51.349 --> 00:04:57.090
direção X, 0.2 na direção Y, zero
na direção Z e eu vou mudar

00:04:57.090 --> 00:05:03.430
a orientação do efetuador. Ele terá um
ângulo roll de zero, ângulo pitch de 180 graus

00:05:03.430 --> 00:05:09.830
e ângulo yaw de 180 graus, especifique graus
e esta é a transformação homogênea

00:05:09.830 --> 00:05:13.870
representando a pose que eu gostaria que
o robô adotasse.

00:05:13.870 --> 00:05:19.520
Eu vou acionar a opção hold do plot e agora
vou plotar aquela pose que obtemos, para que

00:05:19.520 --> 00:05:24.810
possamos ver onde o robô está no momento e
a pose que eu gostaria que ele adotasse.

00:05:24.810 --> 00:05:29.759
Agora, eu vou calcular a cinemática inversa
e, desta vez, farei isso numericamente

00:05:29.759 --> 00:05:36.979
Eu uso um método um pouco diferente no objeto
P560. Eu uso o método chamado ikine. Eu passo

00:05:36.979 --> 00:05:41.720
a posição que eu gostaria que o robô adotasse e
passo o conjunto inicial de ângulos de junta

00:05:41.720 --> 00:05:47.080
para o algoritmo numérico e vou apenas fazer
todos eles igual zero.  Não é particularmente

00:05:47.080 --> 00:05:51.900
imaginativo, mas veremos o que acontece. Certo,
o algoritmo foi concluído e calculado

00:05:51.900 --> 00:05:59.780
um conjunto de ângulos de junta. Se eu agora plotar
o robô nessa configuração, podemos ver que a

00:05:59.780 --> 00:06:04.310
posição do efetuador do robô está na 
origem do sistema de coordenadas azul que

00:06:04.310 --> 00:06:09.699
eu desenhei e que os eixos x, y e z do efetuador 
do robô são paralelos aos eixos X,

00:06:09.699 --> 00:06:13.979
Y e Z do sistema de coordenadas que eu desejo

00:06:13.979 --> 00:06:18.560
A configuração do robô parece um pouco estranha,
isto é, porque com a técnica numérica

00:06:18.560 --> 00:06:24.159
eu não posso controlar explicitamente a posição
adotada. Eu preciso tentar algumas condições

00:06:24.159 --> 00:06:28.569
iniciais diferentes, a fim de talvez obter uma
configuração onde o cotovelo do robô está 

00:06:28.569 --> 00:06:33.849
para cima. Você irá perceber uma mensagem de erro
aqui em vermelho, não há nada para se preocupar, é

00:06:33.849 --> 00:06:39.639
por que todo o conjunto inicial de ângulos de junta que 
escolhi, todas zero, resultando em uma configuração do robô

00:06:39.639 --> 00:06:44.439
que é singular e configurações singulares é 
algo que nós iremos discutir junto

00:06:44.439 --> 00:06:48.699
com Jacobianos nas próximas duas aulas.

00:06:48.699 --> 00:06:52.909
Resolvendo a cinemática inversa numericamente
parece uma coisa muito fácil de fazer, 

00:06:52.909 --> 00:06:55.719
existem desvantagens? Bem há algumas.

00:06:55.719 --> 00:07:00.229
Primeira de todas é importante escolher um bom
conjunto inicial de coordenadas de junta. Se as

00:07:00.229 --> 00:07:05.300
coordenadas de junta estão muito longe das
coordenadas reais da junta necessárias para alcançar

00:07:05.300 --> 00:07:11.060
a posição, então a solução numérica pode não
convergir de fato. Outro problema é que 

00:07:11.060 --> 00:07:17.569
não podemos garantir uma configuração particular 
do robô. A configuração do robô encontrada, depende

00:07:17.569 --> 00:07:21.650
das coordenadas inicias da junta que são escolhidas,
então o algoritmo numérico irá começar

00:07:21.650 --> 00:07:26.110
com um conjunto particular de ângulos de junta que
você fornece e ele executara a otimização

00:07:26.110 --> 00:07:31.659
até que corresponda a posição desejada do 
efetuador. A configuração particular com a qual

00:07:31.659 --> 00:07:36.990
termina, depende de sua escolha inicial de 
coordenadas. Agora importante, você não pode

00:07:36.990 --> 00:07:43.249
controlar a configuração do robô como 
você pode com a solução analítica.

00:07:43.249 --> 00:07:48.620
E finalmente, a solução numérica pode ser 
computacionalmente cara. É um algoritmo

00:07:48.620 --> 00:07:54.050
iterativo e o número de iterações depende de
alguma maneira quão boa é suas coordenadas

00:07:54.050 --> 00:07:59.379
iniciais de junta. Então, se você pretende que isto
seja executado em tempo real, para pode calcular a

00:07:59.379 --> 00:08:05.050
cinemática inversa, digamos em um milésimo de
segundos, então o algoritmo numérico pode não ser a

00:08:05.050 --> 00:08:06.710
maneira mais apropriada.

