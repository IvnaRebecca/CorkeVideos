WEBVTT
Kind: captions
Language: en

00:00:03.860 --> 00:00:08.519
Let's recap some of the big things that we've
learned in this lecture. In the previous lecture

00:00:08.519 --> 00:00:14.249
we discussed the forward kinematic function;
that's the function K. Its argument is Q and

00:00:14.249 --> 00:00:19.430
that's the vector of joint angles, its vector
of length N, where N is the number of joints

00:00:19.430 --> 00:00:25.690
that the robot has. The result of the forward
kinematic function is the pose of the robots

00:00:25.690 --> 00:00:31.850
end effector, which I call here ksiN. Forward
kinematics takes the joint angles and gives

00:00:31.850 --> 00:00:35.000
us the robot end effector pose.

00:00:35.000 --> 00:00:39.340
In this lecture we've discussed the inverse
kinematic function that's shown here as K

00:00:39.340 --> 00:00:46.050
to the minus one. It operates on the robot
end effector pose and tells us the joint angles

00:00:46.050 --> 00:00:52.450
required to achieve that pose. The inverse
is not unique. For a particular robot end

00:00:52.450 --> 00:00:58.120
effector pose, there can be multiple sets
of joint angles which will achieve that particular

00:00:58.120 --> 00:01:02.930
pose, for our little two link robot, there
are two possible configurations shown here.

00:01:02.930 --> 00:01:07.610
For our six link Puma robot, which operates
in three dimensional space, there are in fact

00:01:07.610 --> 00:01:09.820
six possible solutions.

00:01:09.820 --> 00:01:14.060
There are several approaches to solving the
inverse kinematic problem for a particular

00:01:14.060 --> 00:01:19.369
robot. For a simple robot like the two link
example, we use a geometric solution and that

00:01:19.369 --> 00:01:25.290
requires some intuition and some insight,
it involves defining particular triangles,

00:01:25.290 --> 00:01:30.299
introducing new angles and applying a number
of simple trigonometric relationships in order

00:01:30.299 --> 00:01:36.570
to solve for the joint angles we're interested
in, in this case Q1 and Q2 as a function of

00:01:36.570 --> 00:01:44.820
the end effector pose XY and the robot's constant
link lengths A1 and A2. We right down the

00:01:44.820 --> 00:01:49.729
forward kinematic equations, which here give
us the end effector pose X and Y in terms

00:01:49.729 --> 00:01:54.250
of the joint angles and then with a large
amount of manipulation and again with some

00:01:54.250 --> 00:02:00.180
insight and intuition, we can write down equations
which give us the robot joint angles.

00:02:00.180 --> 00:02:04.960
The steps involved in the analytic solution
for robot inverse kinematics involves the

00:02:04.960 --> 00:02:09.819
following steps; firstly we need a model of
the robot, we need to know the position and

00:02:09.819 --> 00:02:13.780
orientation of the joints with respect to
the links. We need to know the lengths of

00:02:13.780 --> 00:02:19.150
das ligações e assim em diante. Dali nós extraímos
um número de equações e tentamos resolver

00:02:19.150 --> 00:02:24.700
para as variáveis de articulações desconhecidas. Como
eu disse antes, isso requer um pouco de percepção humana, embora

00:02:24.700 --> 00:02:29.989
possa ser automatizado usando técnicas de álgebra
computacional para robôs especiais ou classes

00:02:29.989 --> 00:02:31.849
especiais de robôs.

00:02:31.849 --> 00:02:38.069
As grandes vantagens da solução analítica 
é que ela mostra explicitamente as múltiplas configurações

00:02:38.069 --> 00:02:42.730
do robô e deixa você escolher os ângulos
de articulação que irão te dar a configuração

00:02:42.730 --> 00:02:48.709
que você quer. Para o robô Puma 560, ele permite
que você escolha explicitamente uma configuração canhota

00:02:48.709 --> 00:02:54.650
ou uma configuração destra ou o cotovelo para cima
ou o cotovelo para baixo. Outra vantagem é

00:02:54.650 --> 00:03:00.349
que as soluções são muito compactas e rápidas
para executar. Você pode pegar as equações resultantes

00:03:00.349 --> 00:03:03.800
e escrever elas na sua linguagem de programação
favorita e elas vão ser executadas

00:03:03.800 --> 00:03:09.050
muito, muito rápido. Entretanto a abordagem analítica
se torna cada vez mais difícil uma vez que o número de

00:03:09.050 --> 00:03:14.860
articulações aumenta e exige bastante trabalho 
fazer isso para um robô de 6 ligações. Felizmente

00:03:14.860 --> 00:03:19.300
muitas pessoas inteligentes olharam para esse
problema por várias, várias décadas e soluções

00:03:19.300 --> 00:03:25.060
para quase todos os robôes foram derivadas e
publicadas em algum lugar na literatura.

00:03:25.060 --> 00:03:29.610
Uma alternativa para a solução analítica é
a solução numérica e essa é aplicável

00:03:29.610 --> 00:03:34.129
quando a solução analítica não existe ou
a solução analítica é muito difícil de

00:03:34.129 --> 00:03:38.980
descobrir. Isso baseia-se no fato que nós
sempre podemos determinar a cinemática direta

00:03:38.980 --> 00:03:43.239
do robô, isso é relativamente simples
de fazer e nós falamos sobre isso no curso 

00:03:43.239 --> 00:03:46.530
anterior.
Nós sabemos a pose que queremos que o efetuador

00:03:46.530 --> 00:03:51.560
do robô alcance, á qual é chamada ksi*, mas
tudo que precisamos fazer é ajustar os ângulos

00:03:51.560 --> 00:03:58.470
de articulação Q até ksi ser igual a ksi* e podemos
apresentar isso matematicamente como um problema

00:03:58.470 --> 00:04:03.379
de automatização escrito muito formalmente aqui. E nós
mostramos como podemos usar o MATLAB e o Robotic

00:04:03.379 --> 00:04:09.450
Toolbox para determinar a solução numérica para um
robô de 2 ligações e para um robô de 6 ligações.

00:04:09.450 --> 00:04:13.879
Existem algumas desvantagens com a solução
numérica. Você precisa ter cuidado escolhendo

00:04:13.879 --> 00:04:19.629
o conjunto inicial de ângulos de articulação que 
você usa para seu otimizador. Você não pode garantir

00:04:19.629 --> 00:04:24.909
que o otimizador irá encontrar a configuração especial
do robô que você está interessado. Se

00:04:24.909 --> 00:04:30.309
você quisesse uma configuração canhota, não é 
garantido que o otimizador irá encontrar esta

00:04:30.309 --> 00:04:36.259
configuração em particular, isso depende da sua
escolha inicial dos ângulos das articulações. O que 

00:04:36.259 --> 00:04:41.639
também pode ser computacionalmente caro. É um 
algoritmo iterativo e o número de iterações depende

00:04:41.639 --> 00:04:48.479
de quão bom é seu conjunto inicial dos ângulos de articulação
e que despesas computacionais podem ser inadequadas

00:04:48.479 --> 00:04:53.939
em um sistema de tempo real rígido onde você
calcular a cinemática inversa em um pequeno

00:04:53.939 --> 00:04:59.729
e finito período de tempo. Nós falamos sobre
como criar caminhos suaves para o robô

00:04:59.729 --> 00:05:05.069
efetuador se movendo de uma pose a outra e
introduzimos duas aproximações para fazer isso.

00:05:05.069 --> 00:05:10.249
A primeira é o chamado “Caminho de Junta 
Interpolada”. Pegamos a pose inicial e final

00:05:10.249 --> 00:05:16.550
e usamos a cinemática inversa para determinar o 
conjunto final e inicial de ângulos das articulações,

00:05:16.550 --> 00:05:21.819
em seguida, nós interpolamos suavemente entre 
esses dois conjuntos e isso é relativamente

00:05:21.819 --> 00:05:23.639
simples de fazer.

00:05:23.639 --> 00:05:28.469
A desvantagem disso é que não podemos garantir
que o robô irá seguir um caminho em linha reta

00:05:28.469 --> 00:05:34.330
no espaço de tridimensional. Também não podemos
garantir que a orientação do efetuador será

00:05:34.330 --> 00:05:41.069
nosso valor desejado em cada ponto ao logo desse
caminho; entretanto caminhos de junta interpolada

00:05:41.069 --> 00:05:46.740
são relativamente baratos para calcular, pois estamos
apenas interpolando vetores de ângulo de junta

00:05:46.740 --> 00:05:52.729
em cada espaço de tempo. Uma alternativa é calcular
um caminho interpolado cartesiano e o que fazemos 

00:05:52.729 --> 00:05:58.419
aqui é para cada ponto ao longo da trajetória
nós interpolamos entre a pose inicial e a final

00:05:58.419 --> 00:06:04.110
do efetuador. Para cada pose interpolada nós
computamos a cinemática inversa para encontrar

00:06:04.110 --> 00:06:08.279
os ângulos de junta que são apropriados neste
espaço de tempo em particular.

00:06:08.279 --> 00:06:12.759
A vantagem dessa técnica é que permite caminhos 
em linha reta no espaço tridimensional. Também

00:06:12.759 --> 00:06:17.779
garante que o efetuador possua a orientação 
desejada em cada ponto 

00:06:17.779 --> 00:06:19.619
ao longo da trajetória.

00:06:19.619 --> 00:06:24.860
A desvantagem é que computacionalmente é
muito mais caro. Precisamos interpolar poses

00:06:24.860 --> 00:06:29.710
e isso envolve interpolar as componentes
translacional e rotacional 

00:06:29.710 --> 00:06:35.529
e isso pode de fato envolver a conversão de uma matriz
de rotação para um quatérnio que será interpolado

00:06:35.529 --> 00:06:40.339
e, em seguida, será transformado de volta 
para uma matriz de rotação, então temos que

00:06:40.339 --> 00:06:46.589
realizar a cinemática inversa a cada espaço de 
tempo. Muito mais computação envolvida,

00:06:46.589 --> 00:06:50.989
a vantagem é que podemos garantir caminhos
em linha reta no espaço tridimensional.

