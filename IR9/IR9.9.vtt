WEBVTT
Kind: captions
Language: en-GB

00:00:03.810 --> 00:00:08.620
We're going to talk now about the shape of
the Jacobian matrix. A robot manipulator has

00:00:08.620 --> 00:00:12.959
in general got N joints, N could be a small
number, the robot might have only two

00:00:12.959 --> 00:00:17.150
joints. The robots might have 100 joints.
I want to understand what's the effect of

00:00:17.150 --> 00:00:22.230
the number of joints on the shape of the robot
manipulator Jacobian matrix, because the Jacobian

00:00:22.230 --> 00:00:28.849
has one column per joint. So, an N joint robot
has a manipulator Jacobian matrix with N columns.

00:00:28.849 --> 00:00:34.090
The Jacobian has one row for each element
of the spatial velocity vector. So, for motion

00:00:34.090 --> 00:00:39.080
in three dimensions, the spatial velocity
vector has got 6 elements – 3 for translational

00:00:39.080 --> 00:00:43.800
velocity and 3 for angular velocity. And,
that means the Jacobian matrix always has

00:00:43.800 --> 00:00:48.970
six rows. So, the robot manipulator Jacobian
matrix is a 6 x N matrix.

00:00:48.970 --> 00:00:53.980
This robot only has 4 joints and we call it
an under actuated robot. And, that means that

00:00:53.980 --> 00:00:59.530
its task space doesn't cover all of the set
SE3. Although the end effector can achieve

00:00:59.530 --> 00:01:05.800
all positions within the limits of its works
space, it's not able to achieve all possible orientations.

00:01:05.800 --> 00:01:10.359
So, for example, when the robot in a configuration
like this, it can adjust the orientation of

00:01:10.359 --> 00:01:14.229
the gripper like that. But, it's impossible
for it to adjust the orientation of the gripper

00:01:14.229 --> 00:01:17.869
in that direction or in that direction.

00:01:18.640 --> 00:01:23.740
Let's consider the case of a robot with only
4 joints. This is often referred to as an

00:01:23.740 --> 00:01:29.890
under-actuated robotic system. In this case,
the robot Jacobian has got 6 rows and 4 columns.

00:01:29.890 --> 00:01:35.060
The Jacobian is not square, and therefore,
we cannot invert it. But that's not necessarily

00:01:35.060 --> 00:01:40.689
a problem. A robot like this is unable to
rotate the tool about the x or y axis. It's

00:01:40.689 --> 00:01:45.880
just the way it's constructed. It cannot rotate
the tool in that way. So, we can strike out

00:01:45.880 --> 00:01:51.679
these elements of the robot’s spatial velocity.
Since we can't control velocity around these

00:01:51.679 --> 00:01:53.209
axes, let's just remove them.

00:01:53.209 --> 00:01:58.469
If I do that, then I should also remove the
corresponding rows in the Jacobian matrix.

00:01:58.469 --> 00:02:04.969
And, the result now is a 4 x 4 system. And
now, the Jacobian matrix is invertible. Given

00:02:04.969 --> 00:02:09.850
a desired spatial velocity, it's a smaller
spatial velocity vector now. We can compute

00:02:09.850 --> 00:02:14.319
the robot joint angle velocities. We need
to obtain that spatial velocity.

00:02:14.319 --> 00:02:19.840
Here's a robot that has perhaps 100 joints.
In this case, the manipulator Jacobian is

00:02:19.840 --> 00:02:26.530
a 6 x 100 matrix. It's not square and we
cannot invert it. We can compute something

00:02:26.530 --> 00:02:31.260
called the pseudo-inverse and that's often
denoted by the symbol plus.

00:02:31.260 --> 00:02:36.239
The pseudo-inverse is computed in this way.
This looks quite straight forward until you

00:02:36.239 --> 00:02:41.790
remind yourself that the term inside here
is in fact a 100 x 100 matrix and we need to

00:02:41.790 --> 00:02:47.750
invert that. And computationally, that's not
a simple thing to do. However, if we use this

00:02:47.750 --> 00:02:52.769
pseudo-inverse, we can write an expression
that relates the desired spatial velocity

00:02:52.769 --> 00:03:00.549
of the robots end effector to the required
velocity of each of its 100 joints.

00:03:00.549 --> 00:03:04.819
But we can do an extra thing as well in the case
of a robot like this – a robot with more

00:03:04.819 --> 00:03:11.349
than 6 joints. We can add this term here and
we refer to this as the null-space motion.

00:03:11.349 --> 00:03:16.599
It's pre-multiplied by this matrix expression
here, which effectively filters it, so that

00:03:16.599 --> 00:03:21.980
this motion does not affect the pose of the
robot end effector. We can use this motion,

00:03:21.980 --> 00:03:25.730
which doesn't affect the end effector pose
to do things like change the shape of the

00:03:25.730 --> 00:03:31.239
arm. We can also use it to do things like
move a robot joint away from its limit towards

00:03:31.239 --> 00:03:33.560
the middle part of its working range.

00:03:33.560 --> 00:03:39.019
So, we use this extra joint velocity motion
to change the shape of the arm, move joints

00:03:39.019 --> 00:03:44.299
away from their limits. At the same time not
affecting the end effector pose. It's a pretty

00:03:44.299 --> 00:03:50.879
neat trick. This matrix N is referred to as
the null space of the Jacobian matrix. It

00:03:50.879 --> 00:03:55.700
is the set of vectors that pre-multiplied
by the manipulator Jacobian matrix, give a

00:03:55.700 --> 00:04:02.219
result of zero. In this particular case, if
the robot had 100 joints, then the null space

00:04:02.219 --> 00:04:11.260
seria a dimensão 94. Isto é 100 menos
6. Então, N seria uma matriz de 6 x 94 elementos

00:04:11.260 --> 00:04:16.420
Vou importar o modelo de um redundante
robô que se move em 3D e esse é o modelo

00:04:16.420 --> 00:04:21.940
hyper 3D. E, vou pedir um robô
com 20 articulações. Para ilustrar, por exemplo

00:04:21.940 --> 00:04:26.190
Preciso escolher um conjunto de ângulos de articulação. eu
precisa escolher 20 números. Eu sei que se

00:04:26.190 --> 00:04:29.340
eles são todos iguais a zero, o robô irá
estar em uma singularidade.

00:04:29.340 --> 00:04:34.370
Então, o que vou fazer é escolher 20
números aleatórios. Vou usar o MATLAB para contruir

00:04:34.370 --> 00:04:39.650
uma função rand. Então, este é o meu ângulo de articulação,
um vetor de 20 números aleatórios no intervalo de

00:04:39.650 --> 00:04:46.039
0 à 1. E eu posso plotar esta configuração de uma 
articulação em particular para um robô e isto é

00:04:46.039 --> 00:04:50.630
o que parece. Se eu posso ter um bit
de vizualização ao redor, podemos ver que 

00:04:50.630 --> 00:04:55.139
a ponta ligeiramente pra cima e tem alguns
curvas e torções nele.

00:04:55.139 --> 00:05:00.520
Agora que tenho o conjunto de ângulos de articulações e
eu tenho um modelo de robô, posso calcular a matrix

00:05:00.520 --> 00:05:05.830
Jacobiana. E vimos como fazer isso para
muitos outros tipos de robôs. Eu uso o método 

00:05:05.830 --> 00:05:11.430
Jacobiano e eu passo no conjunto de ângulos articulares.
E, esta é a matrix Jacobiana. Podemos ver

00:05:11.430 --> 00:05:16.250
que tem 6 linhas e 20 colunas
porque existem 20 articulações.

00:05:16.250 --> 00:05:20.639
Se eu tentar inverter esta matriz, vou
obter um erro porque a matriz não é

00:05:20.639 --> 00:05:24.910
quadrada. O MATLAB está me dizendo que eu não posso fazer isso
mas posso calcular o pseudo-inverso. Que

00:05:24.910 --> 00:05:31.000
é calculado usando o MATLAB na construção da 
função pinv e passar na matriz Jacobiana.

00:05:31.000 --> 00:05:36.789
E, este é o resultado da pseudo-inversa.
E podemos ver o que temos no espaço de trabalho

00:05:36.789 --> 00:05:41.660
agora uma matriz 20 x 6, a pseudo-inversa de
a matriz Jacobiana.

00:05:41.660 --> 00:05:46.889
Agora, falamos sobre o movimento do espaço nulo.
E, a fim de calcular o movimento do espaço nulo,

00:05:46.889 --> 00:05:52.749
precisamos calcular o espaço nulo da matriz 
Jacobiano e o MATLAB têm a função de fazer isso.

00:05:52.750 --> 00:05:58.620
É a função nula, aqui a matriz 
Jacobiano e aqui está a matriz de espaço nulo.

00:05:58.620 --> 00:06:04.669
A matriz de espaço nulo tem 20 linhas e apenas
14 colunas. 14 vem de 20, que é o

00:06:04.669 --> 00:06:09.879
número de colunas  na matriz original 
menos 6. E 6 é a classificação da matriz

00:06:09.879 --> 00:06:15.520
Jacobiana. Esse é o número de colunas na matriz Jacobiana. 
Então, havia 6 únicas

00:06:15.520 --> 00:06:21.699
colunas e 14 colunas que existe
no espaço nulo daquela matriz. 14 mais

00:06:21.699 --> 00:06:25.610
6 é igual a 20, o número original de colunas.

00:06:25.610 --> 00:06:29.400
Vamos resumir algumas das diferentes formas
que uma matriz Jacobiana pode ter. Para

00:06:29.400 --> 00:06:33.780
o caso de um robô com 6 articulações, dizemos
que o robô está totalmente acionado. A matriz

00:06:33.780 --> 00:06:39.270
Jacobinana será quadrada 6 x 6. E um robô
com 6 juntas é capaz de acessar totalmente 

00:06:39.270 --> 00:06:44.210
as posições dentro de SE3.
Isso significa que em qualquer posição e qualquer

00:06:44.210 --> 00:06:50.090
orientação. Para o caso de um robô com
menos de 6 juntas, que chamamos de

00:06:50.090 --> 00:06:56.990
robô sub-atuado,a matriz Jacobiana será 6 x N. 
Ele terá mais linhas do que colunas.

00:06:56.990 --> 00:07:02.460
Isso significa que o robô não pode acessar todos
possíveis poses dentro de um SE3. E, em ordem

00:07:02.470 --> 00:07:07.509
usar a matriz para fins de controle,
precisamos corrigir isso e fazemos isso 

00:07:07.509 --> 00:07:12.509
removendo alguns graus de liberdade espaciais.
Eliminamos algumas linhas na matriz Jacobiana

00:07:12.509 --> 00:07:19.210
para que se torne uma matriz 5 x 5 ou 4 x 4  
que é então invertível. Dentro do estojo

00:07:19.210 --> 00:07:24.550
de um robô com mais de 6 articulações, que
nós nos referimos como um robô super acionado, a

00:07:24.550 --> 00:07:29.819
matriz jacobiana tem mais colunas do que tem
linhas. É uma matriz 6 x N.

00:07:29.819 --> 00:07:34.930
Para usar a matriz Jacobiana para controle,
tomamos seu pseudo-inverso. A

00:07:34.930 --> 00:07:39.190
grande vantagem de um robô como este é que
podemos pensar em ter juntas sobressalentes e

00:07:39.190 --> 00:07:43.629
podemos usar algumas dessas juntas sobressalentes para fazer
o que chamamos de movimento de espaço nulo. E enquanto

00:07:43.629 --> 00:07:47.780
mantemos a pose ineficaz constante, nós
podemos ajustar todas as juntas para mudar o

00:07:47.780 --> 00:07:51.619
formato do braço ou afaste as articulações
limites de movimento.

