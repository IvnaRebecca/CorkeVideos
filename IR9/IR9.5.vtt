WEBVTT
Kind: captions
Language: pt-BR

00:00:03.889 --> 00:00:07.839
We have just worked out a way to describe
the relationship between the rate of change

00:00:07.839 --> 00:00:13.520
of its joint angles and the translational
and angular velocity of the robot’s end-effector.

00:00:13.520 --> 00:00:19.340
Spatial velocity is a six-vector that comprises
the translational velocity, v, and the angular

00:00:19.340 --> 00:00:24.730
velocity, omega. And, we wrote a relationship
between spatial velocity of the end-effector

00:00:24.730 --> 00:00:28.039
and the velocity of the joint angles.

00:00:28.039 --> 00:00:33.360
For a robot like this, the Jacobian matrix,
J, is a 6 x 6 matrix. It’s square. So, we

00:00:33.360 --> 00:00:39.300
can rearrange this expression to obtain the
robot joint angle velocity that we need in

00:00:39.300 --> 00:00:45.510
order to achieve a desired robot end-effector
spatial velocity and we can do this unless

00:00:45.510 --> 00:00:49.920
the Jacobian is singular. That is its determinant
is equal to zero.

00:00:49.920 --> 00:00:54.680
Unfortunately, there are some circumstances
where the Jacobian will be singular and one

00:00:54.680 --> 00:01:01.140
of the singularities occurs when joint angle
five is equal to zero as shown here. If we

00:01:01.140 --> 00:01:08.110
rotate joint 4, we can see how the robot end-effector
moves. If I move joint 6, we see that the

00:01:08.110 --> 00:01:13.630
end-effector motion is exactly the same; it’s
that due to joint 4. So, if I rotate joints

00:01:13.630 --> 00:01:18.060
4 and 6 in opposite directions, they cancel
each other out. They are both moving, but

00:01:18.060 --> 00:01:21.390
the end-effector is not moving at all.

00:01:21.390 --> 00:01:26.200
Following on from the earlier example, we
can test the determinant of the Jacobian matrix

00:01:26.200 --> 00:01:31.270
for the joint angle configuration QN. And,
here we can see the determinant, and it’s

00:01:31.270 --> 00:01:36.430
not equal to zero. It means I can then invert
the Jacobian matrix and this is what the inverse

00:01:36.430 --> 00:01:41.540
Jacobian looks like. If we consider a different
joint angle configuration, I’m going to

00:01:41.540 --> 00:01:46.140
look at the joint configuration Q0 which is
where all the joint angles equal to zero.

00:01:46.140 --> 00:01:53.040
If I compute the Jacobian here and pass in
QZ, we can see this is what the Jacobian looks

00:01:53.040 --> 00:01:57.040
like and the determinant in this particular
case is equal to zero.

00:01:57.040 --> 00:02:01.859
So, let’s say, I’ve got a robot control problem
and I want the robot end-effector to have

00:02:01.859 --> 00:02:07.119
a very specific spatial velocity denoted by
the Greek letter nu, then I can work out what

00:02:07.119 --> 00:02:11.050
joint velocity I need in order to achieve
that. If I know the joint angles, and then

00:02:11.050 --> 00:02:15.710
I can compute the Jacobian matrix and invert
it. And then, I move all the joints at that

00:02:15.710 --> 00:02:20.170
particular speed and the robot end-effector
will move with the desired spatial velocity,

00:02:20.170 --> 00:02:25.890
nu. Now, the problem is that because the robot
joint angles are changing, after a short while,

00:02:25.890 --> 00:02:30.630
the Jacobian will be no longer appropriate
because the Jacobian is a function of the

00:02:30.630 --> 00:02:35.160
joint angles. So, I will need to recompute
the Jacobian matrix.

00:02:35.160 --> 00:02:39.120
If I was to write a computer algorithm to
do this, it would be a type of discrete time

00:02:39.120 --> 00:02:44.569
algorithm. Seria calculado em uma série de 
passos no tempo discreto, passo de tempo 1,

00:02:44.569 --> 00:02:50.060
passo de tempo 2, passo de tempo 3, e vou 
generalizar isso para o passo de tempo k.
E, o intervalo entre 

00:02:50.060 --> 00:02:56.320
os passos de tempo é dado pelo símbolo delta T.
Então, no passo de tempo, k, tomarei os ângulos 
das juntas 

00:02:56.320 --> 00:03:01.530
que são medidos no tempo, k. Calculo o Jacobiano, 
inverto-o, multiplico-o pela velocidade espacial desejada 

00:03:01.530 --> 00:03:06.970
e determino a velocidade angular da junta 
que preciso atingir. Se eu multiplicar 

00:03:06.970 --> 00:03:12.500
a velocidade da articulação pelo intervalo de tempo, 
delta T, obtenho a mudança nos ângulos das juntas 

00:03:12.500 --> 00:03:17.090
ao longo deste intervalo de tempo. Eu o adiciono ao 
conjunto atual de ângulos das juntas e acabo com o 

00:03:17.090 --> 00:03:22.849
conjunto de ângulos das juntas que preciso ter na próxima 
etapa de tempo, no tempo k + 1. E, então,

00:03:22.849 --> 00:03:30.230
digo ao meu robô para se mover para aquele novo conjunto 
de ângulos de articulação e repito o processo.

00:03:30.230 --> 00:03:34.299
Agora vamos olhar o controle de movimento
de taxa resolvida. E já calculei 

00:03:34.299 --> 00:03:39.340
a matriz Jacobiana para o conjunto de ângulos 
das juntas que chamo de QN. Agora, o que eu quero fazer 

00:03:39.340 --> 00:03:43.980
é especificar a velocidade espacial que desejo 
que meu robô tenha. Vou colocar isso em 

00:03:43.980 --> 00:03:49.220
uma variável chamada, nu, que é a letra grega 
que usei para denotar a velocidade espacial

00:03:49.220 --> 00:03:55.190
e vou pedir uma velocidade espacial de zero em x, 
zero em y, uma unidade por 

00:03:55.190 --> 00:04:00.769
segundo na direção z e sem velocidade angular.
E, vou colocar isso em um vetor coluna.

00:04:00.769 --> 00:04:06.470
Então só temos isso. Se, agora, eu multiplicar 
o inverso do Jacobiano pela velocidade espacial desejada, 

00:04:06.470 --> 00:04:12.210
o que tenho aqui é o vetor de velocidade 
ângular da junta. Este é o 

00:04:12.210 --> 00:04:17.570
conjunto de velocidades angulares da junta que 
me dará o vetor de velocidade espacial desejado, 

00:04:17.570 --> 00:04:22.920
que é um movimento de uma unidade por segundo 
na direção vertical ou na direção z.

00:04:22.920 --> 00:04:27.720
Podemos ver que não envolve movimento algum 
para as articulações 1 e 4 e requer movimento 

00:04:27.720 --> 00:04:33.150
das articulações 2 e 3. Isso é o ombro e a articulação 
do cotovelo e também a articulação 5, uma das 

00:04:33.150 --> 00:04:37.870
articulações do pulso. E, podemos ver que de todas as 
articulações, é a articulação do cotovelo, junta 3 

00:04:37.870 --> 00:04:42.210
que tem que se mover mais rápido para conseguir 
o movimento desejado.

00:04:42.210 --> 00:04:48.620
Aqui está uma animação que mostra isso na prática. 
Ordenei ao robô que se movesse verticalmente 

00:04:48.620 --> 00:04:55.150
com uma velocidade positiva 1 na direção 
global z. Observamos que o efetuador do robô 

00:04:55.150 --> 00:04:59.480
se moveu com velocidade constante. Mas, se olharmos 
como os ângulos das juntas mudam em função 

00:04:59.480 --> 00:05:02.370
do tempo, vemos que eles não estão se movendo linearmente.

00:05:02.370 --> 00:05:06.370
Também sabemos que alguns ângulos das juntas
estão aumentando em velocidade. E, você percebe

00:05:06.370 --> 00:05:10.471
que quando o robô chegou ao fim desse movimento, 
ele começou a ficar um pouco estranho. Ele 

00:05:10.471 --> 00:05:14.810
só pode se mover na direção z por algum tempo. 
Eventualmente, não será capaz de 

00:05:14.810 --> 00:05:17.250
alcançar a posição para a qual precisa se mover.

