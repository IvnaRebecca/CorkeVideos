WEBVTT
Kind: captions
Language: pt-BR

00:00:03.830 --> 00:00:08.930
Iremos introduzir um conceito importante
chamado taxa de controle de movimento definida. Parece

00:00:08.930 --> 00:00:14.440
complexo, mas é até bem simples de entender.
Para muitos dos problemas do mundo real, poderemos

00:00:14.440 --> 00:00:20.270
ter o interesse de que o efetuador do robô se 
mova ao longo de uma linha reta no espaço Cartesiano.

00:00:20.270 --> 00:00:24.560
Agora sabemos que se movermos, por exemplo,
o ângulo de junta 1, movermos o ângulo de junta 2, daí

00:00:24.560 --> 00:00:29.590
a extremidade do robô tende a se mover em arcos
no espaço. Nós não queremos que ele se mova em arcos.

00:00:29.590 --> 00:00:34.090
Queremos que ele se mova ao longo de uma linha reta.
Então começamos a especificar a velocidade Cartesiana

00:00:34.090 --> 00:00:41.070
que queremos que o efetuador obedeça.
Queremos converter isso, então, na velocidade de junta adequada.

00:00:41.110 --> 00:00:46.110
Já mencionamos isso. Pegamos a velocidade desejada
nu, multiplicamos ela pela Jacobiana 

00:00:46.110 --> 00:00:52.089
inversa e chegamos à velocidade de junta 
que precisamos. E nós podemos computar essa Jacobiana inversa,

00:00:52.089 --> 00:00:57.070
podemos escrevê-la simbolicamente, como fiz
aqui. Agora o que eu preciso é que

00:00:57.070 --> 00:01:02.790
o hardware do robô mova as juntas com essa velocidade
desejada. Mas depois que o robô tenha se movido

00:01:02.790 --> 00:01:07.600
por um curto período, o vetor ângulo de junta
Q terá mudado de forma que essa Jacobiana

00:01:07.600 --> 00:01:13.140
que eu computei não será mais adequada.
Então o que eu preciso fazer é, periodicamente,

00:01:13.140 --> 00:01:19.000
atualizar a matriz Jacobiana. E usar isso quando
estiver computando o vetor Q ponto de velocidade desejada

00:01:19.000 --> 00:01:26.440
do robô. Então tudo é uma questão de mover as juntas
do robô, atualizar a Jacobiana, computar a

00:01:26.440 --> 00:01:33.880
velocidade de junta do robô, mover as juntas, atualizar
a Jacobiana e por aí vai. Repita isso indefinidamente.

00:01:33.880 --> 00:01:39.310
Muitos dos algoritmos de controle executados num computador
digital são tipicamente algoritmos de tempo discreto. 

00:01:39.310 --> 00:01:44.390
Ou seja, eles computam as coisas em intervalos de tempo
discretos. Bom, aqui temos uma linha do tempo e

00:01:44.390 --> 00:01:51.000
nós indicamos alguns passos. Passo 1,
passo 2, passo 3 e por aí vai. E a duração

00:01:51.000 --> 00:01:56.159
desses passos irei denotar 
através do símbolo delta T. Ele poderá ser 1/10 de

00:01:56.159 --> 00:02:01.450
segundo, ou pode ser 1/1000 de segundo,
algo assim... Agora, para cada passo, o que

00:02:01.450 --> 00:02:07.180
vou fazer é pegar o atual valor
dos ângulos de junta e chamá-lo de QK. Que

00:02:07.180 --> 00:02:10.129
significa ângulos de junta no passo K

00:02:10.129 --> 00:02:15.140
Irei computar a Jacobiana, pegar a inversa,
multiplicá-la pela velocidade que eu quero

00:02:15.140 --> 00:02:21.610
atingir e computar o Q ponto que eu preciso
atingir nesse passo específico. O que farei

00:02:21.610 --> 00:02:27.980
agora é pegar essa velocidade de junta Q ponto
multiplicar ela por delta T para

00:02:27.980 --> 00:02:33.160
que isso me dê um deslocamento de ângulo de junta;
ou seja, o quanto eu quero que as juntas

00:02:33.160 --> 00:02:35.180
se movam no intervalo de tempo seguinte.

00:02:35.180 --> 00:02:42.000
Eu adiciono isso ao atual valor dos ângulos
de junta QK. E isso me dá o alvo do

00:02:42.000 --> 00:02:47.740
robô. É aí onde quero que os ângulos de junta
do robô estejam no passo K+1. Daí eu digo

00:02:47.740 --> 00:02:53.000
para o hardware do robô para mover as juntas até
essa nova configuração de ângulo de junta ao longo do 

00:02:53.000 --> 00:02:57.599
intervalo de tempo delta T. Daí eu vou repetir esses
passos enquanto for necessário.
