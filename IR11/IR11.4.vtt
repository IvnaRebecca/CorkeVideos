WEBVTT
Kind: captions
Language: en-GB

00:00:03.429 --> 00:00:07.609
Aqui está a expressão que introduzimos anteriormente
para a dinâmica inversa de uma ligação serial do

00:00:07.609 --> 00:00:13.480
robô manipulador expresso em forma de matriz.
Estamos interessados agora em considerar o efeito

00:00:13.480 --> 00:00:18.650
da gravidade. A gravidade é a força que atua
no robô, mesmo que não esteja se movendo. Então nós

00:00:18.650 --> 00:00:24.830
pode eliminar os termos que são proporcionais
para a aceleração da articulação e a velocidade da articulação.

00:00:24.830 --> 00:00:29.840
É apenas este termo no final. O termo
G. Isso representa o torque de gravidade que esta

00:00:29.840 --> 00:00:35.370
atuando nas articulações do robô manipulador.
É o torque que neutraliza a gravidade e

00:00:35.370 --> 00:00:38.810
impede que o braço colapse com seu próprio
peso.

00:00:38.810 --> 00:00:43.640
Aqui, novamente, temos um modelo simbólico de nosso
robô de 2 ligações. E o que vou fazer é

00:00:43.640 --> 00:00:49.579
para usar o método gravload que me diz
o torque que está agindo nas juntas do

00:00:49.579 --> 00:00:57.379
robô. Os argumentos para gravload são os
ângulos articulares. Eu passo em um vetor que contém

00:00:57.379 --> 00:01:02.579
Q1 e Q2; estas variáveis simbólicas de articulação.
E aqui está a expressão para gravidade que

00:01:02.579 --> 00:01:08.720
está atuando nas articulações do robô. E
vemos que o termo para a junta 1 é bastante

00:01:08.720 --> 00:01:14.080
desde que a expressão para a junta 2 seja
um pouco mais curto.

00:01:14.080 --> 00:01:18.990
Podemos ver que esta expressão contém um
parâmetros cinemáticos, os comprimentos de ligação A1 e

00:01:18.990 --> 00:01:26.650
A2. As posições dos centros de massa C1
e C2, as massas das duas articulações M1 e

00:01:26.650 --> 00:01:30.939
M2.E podemos ver que há muitos
termos cos e seno aqui.

00:01:30.939 --> 00:01:35.420
Até agora, falamos sobre as forças no
robô apenas devido ao seu próprio peso. Mas útil ao

00:01:35.420 --> 00:01:39.900
robô também deve ser capaz de transportar uma carga útil.
Pegue um objeto daqui e coloque-o no chão

00:01:39.900 --> 00:01:45.909
bem ali. Então, claramente, o último ligação na
cadeia do robô deve conter a carga útil.

00:01:45.909 --> 00:01:50.040
Mas isso se propaga abaixo na cadeia em direção
a base do robô. Cada junta do

00:01:50.040 --> 00:01:56.590
robô tem que ajudar a segurar a carga útil para parar
sendo puxado para baixo pela força da gravidade.

00:01:56.590 --> 00:02:01.810
Então, qual é o efeito da carga útil? Bem toda
a junta tem um torque máximo possível. então

00:02:01.810 --> 00:02:06.870
vamos imaginar que temos uma carga útil no
fim do robô e vamos aumentando sua massa.

00:02:06.920 --> 00:02:12.800
Podemos calcular o torque que cada uma das
articulações precisam exercer a fim de sustentar

00:02:12.809 --> 00:02:17.370
essa carga útil. Conforme aumentamos a massa do
carga útil, eventualmente encontraremos aquela

00:02:17.370 --> 00:02:22.950
junta atingindo seu limite de torque e se torna
sobrecarregado. E essa é a carga útil máxima

00:02:22.950 --> 00:02:24.629
que o robô pode segurar.

00:02:24.629 --> 00:02:29.599
Agora sabemos que o torque da gravidade é 
função da configuração do robô.

00:02:29.599 --> 00:02:33.579
Se um robô está segurando 10 kg, pode haver
algumas configurações particularmente onde os

00:02:33.579 --> 00:02:39.349
10 kg está perto da base do robô onde
é possível manter essa carga útil específica.

00:02:39.349 --> 00:02:44.279
Mas se o robô está com o braço totalmente esticado,
pode não ser capaz de conter aquela

00:02:44.279 --> 00:02:49.639
carga útil. Portanto, a carga útil máxima do robô
é uma função das capacidades de torque dos

00:02:49.639 --> 00:02:55.150
motores, mas também é uma função do
configuração do robô.

00:02:55.150 --> 00:03:02.249
Vou voltar a um modelo numérico
do nosso robô de 2 ligações e carrego isso usando

00:03:02.249 --> 00:03:07.689
o script mdl_twolink.

00:03:07.689 --> 00:03:12.760
Vou agora calcular a carga de gravidade
nas articulações do robô usando o método gravload.

00:03:12.760 --> 00:03:20.189
Vou calcular isso para o ângulo da junta
0 e 0. E este é o resultado que obtemos. DE

00:03:20.189 --> 00:03:25.400
fato, é o mesmo resultado que obtivemos um pouco antes
usando o algoritmo recursivo de Newton-Euler.

00:03:25.400 --> 00:03:29.949
In fact gravity load itself is based on the
recursive Newton-Euler algorithm.

00:03:29.949 --> 00:03:37.159
Let's just have a look at a configuration
of our robot. We're going to plot it for joint

00:03:37.159 --> 00:03:43.739
angles 0 and 0 and this is what it looks like.
Now let's imagine that we put the robot into

00:03:43.739 --> 00:03:48.260
a different configuration. Let's make the
first joint angle equal to PI on 2 radians

00:03:48.260 --> 00:03:52.379
or 90 degrees. But now our robot is pointing
straight upwards.

00:03:52.379 --> 00:03:56.659
So what do we think the gravity load on the
joints would be in this case? Well it's easy

00:03:56.659 --> 00:04:03.619
enough to figure out. We use the twolink object,
the gravload method and we pass in the joint

00:04:03.619 --> 00:04:10.699
angles, PI on 2 and 0. And we see that the
gravity load on the joints is almost equal

00:04:10.699 --> 00:04:15.760
to zero or some slight numerical error here.
It's 10 to the minus 14. And this is what

00:04:15.760 --> 00:04:20.609
we expect because in this particular configuration,
the joints don't need to exert any torque

00:04:20.609 --> 00:04:26.939
at all to hold the robot straight up. The
robot is in fact balancing in an upright

00:04:26.939 --> 00:04:31.449
configuration. It's not stable but it doesn't
require any joint torque to maintain this

00:04:31.449 --> 00:04:34.680
exact configuration.

00:04:34.680 --> 00:04:39.560
Now we're going to look at the effect on payload.
I can add a payload to my robot object very

00:04:39.560 --> 00:04:45.199
easily. Here is my robot object and I used
the payload method and I'm going to add a

00:04:45.199 --> 00:04:51.370
1 kg payload, and it's going to be placed
at the coordinate 0, 0, 0 with respect to

00:04:51.370 --> 00:04:53.240
the link 2 coordinate frame.

00:04:53.240 --> 00:04:58.800
So it's actually going to be right on the
end of link 2. The robot now has a payload

00:04:58.800 --> 00:05:05.020
and now I'm going to compute the gravity load
for the robot when it's in the configuration

00:05:05.020 --> 00:05:10.240
0,0. So that's with the arm stretched out
straight and horizontally.

00:05:10.240 --> 00:05:14.990
Now we see that the torque on the joints,
on joint 1 and joint 2 is increased. And that's

00:05:14.990 --> 00:05:21.560
because the robot is trying to hold a 1 kg
load in this rather awkward configuration.

00:05:21.560 --> 00:05:26.949
So the robot joints are going to have to work
about as hard as they can in order to keep

00:05:26.949 --> 00:05:30.330
that 1 kg from pulling the end of the robot
down.

00:05:30.330 --> 00:05:37.780
Let's look now at a complex robot model. We
introduce a model for the PUMA 560 robot.

00:05:37.780 --> 00:05:42.030
And you can see that there is a new variable
in our workspace called P560, it’s another

00:05:42.030 --> 00:05:45.750
serial link object which can describe a robot
manipulator.

00:05:45.750 --> 00:05:52.110
We're going to use the same gravload method
for this robot. And for one of anything better

00:05:52.110 --> 00:05:58.319
I'm going to put in joint angles all equal
to zero. And this is what the gravity load

00:05:58.319 --> 00:06:03.449
looks like. Now we can see what the PUMA robot
looks like in that particular configuration.

00:06:03.449 --> 00:06:13.210
0, 0, 0, 0, 0, 0. And PUMA robot with a all
zero joint angle configuration looks like

00:06:13.210 --> 00:06:18.240
this. The upper arm is horizontal and the
lower arm is vertical. And these are the joint

00:06:18.240 --> 00:06:21.080
torques that are required to do that.

00:06:21.080 --> 00:06:24.479
The toolbox robot object has got a lot of
capabilities and one of the things we could

00:06:24.479 --> 00:06:31.780
do is to change gravitational acceleration.
And we change that to 0, 0, 9.81, which

00:06:31.780 --> 00:06:37.540
is nominal earth’s gravity, going to divide
by 6 because that's what the gravity is on the moon.

00:06:38.700 --> 00:06:44.520
Now we can see the gravity load on the robot,
given that it's on the moon, it's the gravity

00:06:44.530 --> 00:06:52.069
load function. And I put in the joint angles
six zeros again. And here we see what the

00:06:52.069 --> 00:06:58.829
gravity load, gravity torques on the joints of this PUMA robot would be if it was working on the moon.

