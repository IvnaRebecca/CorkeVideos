WEBVTT
Kind: captions
Language: en-GB

00:00:03.530 --> 00:00:07.310
We've covered an awful lot of ground in this
particular lecture, so let's summarise some

00:00:07.310 --> 00:00:10.080
of the most important points.

00:00:10.080 --> 00:00:14.249
In the last lecture, we considered a very
simplistic control case. We called it independent

00:00:14.249 --> 00:00:19.350
joint control and we ignored facts like gravity,
but in a real robot such as the PUMA robot,

00:00:19.350 --> 00:00:23.770
shown here in this particular configuration,
we can imagine the torque that must be required

00:00:23.770 --> 00:00:30.770
at the shoulder joint and at the elbow joint in order to stop the robot collapsing under the effect of gravity.

00:00:31.060 --> 00:00:36.780
So this was the robot joint control we had
for the independent control case and we modified

00:00:36.780 --> 00:00:41.379
that. We introduced the disturbance torque,
and this might be due to non-linear friction

00:00:41.379 --> 00:00:46.140
or it might be due to gravity. This is the
disturbance force TD.

00:00:46.140 --> 00:00:50.210
And then we looked at the effect that the
disturbance torque has on the joint position

00:00:50.210 --> 00:00:55.219
and it can be significant, so it's something
that we need to deal with.

00:00:55.219 --> 00:01:00.519
We then considered a very simple case: a single
motor attached to a link, and the link has

00:01:00.519 --> 00:01:05.350
got mass. If a joint is controlled by a PD
controller, a pretty typical sort of controller

00:01:05.350 --> 00:01:11.130
for a robot joint, then we saw that the effect
of gravity is to deflect the joint, introducing

00:01:11.130 --> 00:01:16.700
a positioning error. The joint angle is not
the desired joint angle. And the amount of

00:01:16.700 --> 00:01:22.219
that error is inversely proportional to the
controller gain P, so if we want to make the

00:01:22.219 --> 00:01:28.000
error very small, we need to use a very high
gain. But we saw that there is some consequences

00:01:28.000 --> 00:01:33.979
with increasing the gain, in particular, increased
overshoot in our joint control system.

00:01:33.979 --> 00:01:38.759
So another strategy that we looked at then
is to introduce an integral term. This is

00:01:38.759 --> 00:01:43.479
a term that ramps up while there is a positioning
error, increasing the torque in the joint

00:01:43.479 --> 00:01:46.770
until the error is eliminated.

00:01:46.770 --> 00:01:51.189
Another strategy we looked at is feedforward
control. And here, we assume that we can estimate

00:01:51.189 --> 00:01:55.829
the disturbance torque and in the case of
gravity, that's most certainly the case. So,

00:01:55.829 --> 00:02:01.289
we estimate what gravity should be and multiply
it by a gain and introduce it into the output

00:02:01.289 --> 00:02:04.539
of our controller, and that cancels out the
actual disturbance.

00:02:04.539 --> 00:02:10.310
This is a technique that works well even if
our estimate is not too precise. Partial cancellation

00:02:10.310 --> 00:02:14.450
of disturbance is better than no cancellation
at all.

00:02:14.450 --> 00:02:19.290
Next we considered the dynamic parameters
of a serial link manipulator.

00:02:19.290 --> 00:02:22.530
We've looked at this simple robot earlier when we were studying kinematics.

00:02:22.530 --> 00:02:24.760
Now we want to understand the dynamics of this.

00:02:24.760 --> 00:02:29.040
So we've indicated the center of mass of each
of the links, and we described the position

00:02:29.040 --> 00:02:34.040
of the center of mass of each link with respect
to the link coordinate frame and the inertia

00:02:34.040 --> 00:02:40.599
of each link. The mass is a scalar, the position
of the center of mass is a three-element vector,

00:02:40.599 --> 00:02:45.440
and the inertia is a three by three matrix,
it's a symmetric matrix, so it actually has

00:02:45.440 --> 00:02:52.299
only six unique elements. So each link is
therefore described by ten dynamic parameters.

00:02:52.299 --> 00:02:56.299
The dynamics of moving bodies is described
by a number of mathematical techniques. And

00:02:56.299 --> 00:03:02.099
we used a combination of Newton's second law,
F equals MA and Euler's equation for rotational

00:03:02.099 --> 00:03:05.620
motion. Together, we call this a Newton-Euler
method.

00:03:05.620 --> 00:03:11.230
And we then described a very efficient computer
algorithm, the recursive Newton-Euler algorithm,

00:03:11.230 --> 00:03:18.720
o qual podemos usar no MATLAB para calcular torques
de junta em função de Q, Q ponto e Q dois pontos.

00:03:18.720 --> 00:03:23.269
Não entramos nos detalhes do método recursivo
Newton-Euler. Você pode achar os detalhes

00:03:23.269 --> 00:03:28.360
em vários livros e também pode olhar no 
código exibido pela Toolbox.

00:03:28.360 --> 00:03:34.360
As expressões para o torque de junta do robô em
função de Q, Q ponto e Q dois pontos são

00:03:34.360 --> 00:03:39.000
até um pouco complicadas, mas elas podem ser
fatoradas e expressas de forma concisa

00:03:39.000 --> 00:03:45.970
em uma equação matricial. Daí o torque aplicado à
junta implica em um termo inercial, em um termo de

00:03:45.970 --> 00:03:51.459
Coriolis e centrípeto, e em um termo de gravidade. Nós
vamos passar um tempinho investigando

00:03:51.459 --> 00:03:55.360
detalhadamente cada um desses termos.

00:03:55.360 --> 00:04:00.040
No que tange ao controle de uma junta específica
de um robô, as coisas são bem mais complicadas do que

00:04:00.040 --> 00:04:04.819
elas eram na situação do controle de junta
independente. Antes, tínhamos que lidar apenas

00:04:04.819 --> 00:04:08.790
com os dois primeiros termos. Agora temos que lidar com 
torques que são causados pela aceleração de todas

00:04:08.790 --> 00:04:14.900
as outras juntas do robô, com a velocidade de
todas as outras juntas do robô e com a influência da gravidade.

00:04:14.900 --> 00:04:20.000
Com alguma manipulação matemática, podemos
visualizar isso com uma equação um tanto concisa,

00:04:20.000 --> 00:04:24.570
que se apresenta assim. E a linha de baixo
mostra que a inércia da junta do robô é

00:04:24.570 --> 00:04:29.910
uma função da configuração de todo o
robô, não é mais uma constante.

00:04:29.910 --> 00:04:34.810
Temos o termo de fricção viscosa e temos
o termo de perturbação de torque, o qual é causado

00:04:34.810 --> 00:04:40.560
pela aceleração e pela velocidade de todas as outras
juntas do robô. Inércia com variação no tempo é um

00:04:40.560 --> 00:04:44.340
pequeno problema porque ela dificulta
o ajuste do sistema de controle na obtenção do

00:04:44.340 --> 00:04:47.580
melhor tempo de adequação e sobressinal.

00:04:47.580 --> 00:04:51.220
O torque de perturbação significa mais trabalho para
o controlador de junta. Ele deve obter uma alta

00:04:51.220 --> 00:04:57.699
performance para conseguir ignorar o torque de
perturbação e desempenhar objetivos com ordem e precisão.

00:04:57.699 --> 00:05:02.860
Existem algumas técnicas que ajudam na eliminação desses efeitos 
da dinâmica de um corpo rígido, como introduzir uma caixa de 

00:05:02.860 --> 00:05:07.889
transmissão. Ela reduz a inércia dependente de configuração,
a qual torna a inércia quase independente da

00:05:07.889 --> 00:05:13.880
configuração do robô e atenua consideravelmente
o torque de perturbação. Uma caixa de transmissão é um

00:05:13.880 --> 00:05:21.200
truque simples e a maioria dos robôs possuem ela 
para amplificar o torque de motores elétricos de alta velocidade.

00:05:21.800 --> 00:05:28.460
Podemos aplicar também uma técnica de cálculo
chamada controle de torque de alimentação direta ou controle

00:05:28.460 --> 00:05:33.169
de torque calculado. Efetivamente, o que estamos 
fazendo aqui é trocar o custo e a complexidade 

00:05:33.169 --> 00:05:37.410
mecânica - por exemplo, a adição de uma caixa de
transmissão - com cálculo. O cálculo está

00:05:37.410 --> 00:05:41.050
ficando mais e mais acessível a cada ano.

00:05:41.050 --> 00:05:46.360
Podemos rearranjar as equações de movimento
de corpos rígidos dessa forma. Podemos obter uma expressão

00:05:46.360 --> 00:05:52.240
para Q ponto ponto - a aceleração da junta - em
relação ao toque que apliquei a um robô.

00:05:52.240 --> 00:05:56.800
Eu posso integrar a aceleração para obter velocidade,
integrada novamente para obter posição, e agora

00:05:56.800 --> 00:06:01.370
o que tenho é a dinâmica direta do
manipulador de robô. Essa é uma função que

00:06:01.370 --> 00:06:06.289
me dá o movimento do robô como uma função
de torque. E isso é bastante útil quando

00:06:06.289 --> 00:06:12.430
eu quero simular a movimentação do robô em um ambiente
do mundo real com um controle que eu tenha projetado.
